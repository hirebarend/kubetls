apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-role
  namespace: default
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "list", "watch", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-role-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Release.Name }}-role
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-service-account
  namespace: default
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-secret
data:
{{- range $key, $value := .Values }}
  {{ $key }}: {{ $value | b64enc | quote  }}
{{- end }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-cron-job
  annotations:
    keel.sh/policy: force
    keel.sh/trigger: poll
    keel.sh/pollSchedule: "@every 5m"
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: {{ .Release.Name }}-service-account
          containers:
          - name: {{ .Release.Name }}
            image: ghcr.io/{{ .Values.USERNAME }}/kubetls:main
            imagePullPolicy: Always
            resources:
              requests:
                memory: "256Mi"
              limits:
                memory: "256Mi"
            env:
            - name: JOB
              value: "true"
            envFrom:
            - secretRef:
                name: {{ .Release.Name }}-secret
          restartPolicy: OnFailure
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
  annotations:
    keel.sh/policy: force
    keel.sh/trigger: poll
    keel.sh/pollSchedule: "@every 5m"
spec:
  replicas: 1
  revisionHistoryLimit: 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        deployment-timestamp: "{{ now }}"
    spec:
      serviceAccountName: {{ .Release.Name }}-service-account
      containers:
      - name: {{ .Release.Name }}
        image: ghcr.io/{{ .Values.USERNAME }}/kubetls:main
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
          limits:
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /api/v1/ping
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        envFrom:
        - secretRef:
            name: {{ .Release.Name }}-secret
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-service
spec:
  selector:
    app: {{ .Release.Name }}
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-ingress
  annotations:
      nginx.ingress.kubernetes.io/hsts: "false"
spec:
  rules:
    - host: "{{ .Values.HOST }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }}-service
                port:
                  number: 80
  ingressClassName: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-ingress-x
  annotations:
      nginx.ingress.kubernetes.io/hsts: "false"
spec:
  rules:
    - http:
        paths:
          - path: /.well-known/acme-challenge
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-service
                port:
                  number: 80
  ingressClassName: nginx